import * as vscode from 'vscode';

export class OutputPanel {
    private static instance: OutputPanel | undefined;
    private panel: vscode.WebviewPanel | undefined;
    private outputs: string[] = [];
    private isPanelVisible: boolean = false;

    private constructor() {
        this.createPanel();
    }

    public static getInstance(): OutputPanel {
        if (!OutputPanel.instance) {
            OutputPanel.instance = new OutputPanel();
        }
        return OutputPanel.instance;
    }

    private createPanel() {
        this.panel = vscode.window.createWebviewPanel(
            'outputPanel',
            'Output Panel',
            vscode.ViewColumn.Beside,
            {
                enableScripts: true
            }
        );

        const initialContent = this.getInitialContent();
        this.panel.webview.html = this.getWebviewContent(initialContent, '');

        this.panel.onDidDispose(() => {
            this.panel = undefined;
            this.isPanelVisible = false;
            
        });

        this.panel.onDidChangeViewState(event => {
            this.isPanelVisible = event.webviewPanel.visible;
            if (this.isPanelVisible) {
                this.restoreSavedOutput();
            }
        });

        this.isPanelVisible = true; 
        this.restoreSavedOutput(); 
    }

    public updateWebviewContent(output: string) {
        if (this.panel) {
            const currentContent = this.panel.webview.html || this.getInitialContent();
            const newContent = this.appendOutputToContent(currentContent, output);
            this.panel.webview.html = newContent;
            this.saveCurrentOutput(); 
        }
    }

    public showPanel() {
        if (this.panel) {
            this.panel.reveal();
        } else {
            this.createPanel();
        }
    }

    public clearWebviewContent() {
        if (this.panel) {
            const initialContent = this.getInitialContent();
            this.panel.webview.html = this.getWebviewContent(initialContent, '');
            this.outputs = []; 
        }
    }

    private appendOutputToContent(currentContent: string, newOutput: string): string {
        const timestamp = new Date().toLocaleTimeString();
        const prefixedOutput = `[${timestamp}] ${newOutput.trim()}`;

        let updatedContent = currentContent;

        const bodyEndIndex = updatedContent.lastIndexOf('</body>');
        if (bodyEndIndex !== -1) {
            updatedContent = updatedContent.substring(0, bodyEndIndex);

            updatedContent += `
                <div id="output">
                    <pre>${prefixedOutput}</pre>
                    <hr>
                </div>
            </body>
            </html>`;
        }

        return updatedContent;
    }

    private getWebviewContent(initialContent: string, output: string) {
        return `<!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <title>Output Panel</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    padding: 20px;
                }
                hr {
                    margin: 10px 0;
                    border: none;
                    border-top: 1px solid #ccc;
                }
            </style>
        </head>
        <body>
            <h1>Output Panel</h1>
            <div id="initialContent">
                <pre>${initialContent}</pre>
            </div>
            <div id="output">
                <pre>${output}</pre>
            </div>
        </body>
        </html>`;
    }

    private getInitialContent() {
        return `
------------------------------------------------------------
|                        ASPDEV                            |
------------------------------------------------------------
This panel belongs to the ASPDEV extension, 
an integrated environment for ASP code development and 
testing. Keep this file open to view 
the outputs generated by the extension.

Available commands:
- To view commands, use the shortcut Ctrl+Shift+P (Cmd+Shift+P on macOS).
- Clear Output Panel: Clears the contents of the output panel.
- Execute ASP Code: Executes ASP code.
- Execute Test File: Executes ASP Testing code.
For the last two commands make sure you have the file to execute open in the editor.
------------------------------------------------------------
`;
    }

    private saveCurrentOutput() {
        if (this.panel) {
            const currentContent = this.panel.webview.html || '';
            this.outputs.push(currentContent);
        }
    }

    private restoreSavedOutput() {
        if (this.panel && this.outputs.length > 0) {
            const lastOutput = this.outputs[this.outputs.length - 1];
            this.panel.webview.html = lastOutput;
        }
    }

   
}
